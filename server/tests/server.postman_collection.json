{
	"info": {
		"_postman_id": "b8e9b2f8-f5b0-4a25-8df0-70464c52bdc2",
		"name": "server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15823420"
	},
	"item": [
		{
			"name": "Users Controller Test",
			"item": [
				{
					"name": "Create profile 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =  pm.response.json();\r",
									"var profileId = jsonData.userCreated._id;\r",
									"pm.environment.set(\"profileID_1\", profileId)\r",
									"\r",
									"\r",
									"pm.test(\"Correct status code\",\r",
									"    function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct user response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.userCreated._id).to.eql(\"HarryPotter\");\r",
									"    pm.expect(jsonData.userCreated.password).to.eql(\"Hogwarts123\");\r",
									"    pm.expect(jsonData.userCreated.question).to.eql(\"Which house?\");\r",
									"    pm.expect(jsonData.userCreated.answer).to.eql(\"Gryffindor\"); \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"HarryPotter\",\r\n    \"password\":\"Hogwarts123\",\r\n    \"question\":\"Which house?\",\r\n    \"answer\": \"Gryffindor\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/profiles",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create profile 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =  pm.response.json();\r",
									"var profileId =jsonData.userCreated._id;\r",
									"pm.environment.set(\"profileID_2\", profileId)\r",
									"\r",
									"pm.test(\"Correct status code\",\r",
									"    function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct user response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.userCreated._id).to.eql(\"RonWeasley\");\r",
									"    pm.expect(jsonData.userCreated.password).to.eql(\"Hogwarts321\");\r",
									"    pm.expect(jsonData.userCreated.question).to.eql(\"Favorite color?\");\r",
									"    pm.expect(jsonData.userCreated.answer).to.eql(\"Orange\"); \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"RonWeasley\",\r\n    \"password\":\"Hogwarts321\",\r\n    \"question\":\"Favorite color?\",\r\n    \"answer\": \"Orange\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/profiles",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect- Username already",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Correct status code\",function(){\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct  error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"      pm.expect(jsonData.message).to.eql(\"Username already exists\"); \r",
									"});      "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"HarryPotter\",\r\n    \"password\":\"Hogwarts123\",\r\n    \"question\":\"Which house?\",\r\n    \"answer\": \"Gryffindor\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/profiles",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all -  2 profiles",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/profiles",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get profile 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\",\r",
									"    function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct user response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.user._id).to.eql(\"HarryPotter\");\r",
									"    pm.expect(jsonData.user.password).to.eql(\"Hogwarts123\");\r",
									"    pm.expect(jsonData.user.question).to.eql(\"Which house?\");\r",
									"    pm.expect(jsonData.user.answer).to.eql(\"Gryffindor\"); \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Change profile 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\",function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct profile response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.updatedUser._id).to.eql(\"HarryPotter\");\r",
									"    pm.expect(jsonData.updatedUser.password).to.eql(\"Hogwarts123\");\r",
									"    pm.expect(jsonData.updatedUser.question).to.eql(\"Which house?\");\r",
									"    pm.expect(jsonData.updatedUser.answer).to.eql(\"Under the stairs\"); \r",
									"  \r",
									"  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answer\":\"Under the stairs\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/profiles/:profileId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete profile 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct delete message\"), function(){\r",
									"      var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"The profile has been deleted\");\r",
									"    pm.expect(jsonData.deletedUSer._id).to.eql(\"HarryPotter\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  profile 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct delete message\"), function(){\r",
									"      var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"The profile has been deleted\");\r",
									"    pm.expect(jsonData.deletedUSer._id).to.eql(\"RonWeasley\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Expected- User not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "6324fc6dfae32c63c85a05b9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Expected -Get All- User not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"User not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Expected-Spec- User not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"User not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "6324ebae2552d448d071cc78"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Recipes Controller Test",
			"item": [
				{
					"name": "Create profile 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =  pm.response.json();\r",
									"var profileId = jsonData.userCreated._id;\r",
									"pm.environment.set(\"profileID_1\", profileId)\r",
									"\r",
									"\r",
									"pm.test(\"Correct status code\",\r",
									"    function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct user response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.userCreated._id).to.eql(\"HarryPotter\");\r",
									"    pm.expect(jsonData.userCreated.password).to.eql(\"Hogwarts123\");\r",
									"    pm.expect(jsonData.userCreated.question).to.eql(\"Which house?\");\r",
									"    pm.expect(jsonData.userCreated.answer).to.eql(\"Gryffindor\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"HarryPotter\",\r\n    \"password\":\"Hogwarts123\",\r\n    \"question\":\"Which house?\",\r\n    \"answer\": \"Gryffindor\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/profiles",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create recipe 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response =  pm.response.json();\r",
									"var recipeId = response.recipeCreated._id;\r",
									"pm.environment.set(\"recipeId1\", recipeId);\r",
									"\r",
									"const potatoObject = response.recipeCreated.items.find(obj => obj.item ===\"potato\");\r",
									"\r",
									"const ketchupObject = response.recipeCreated.items.find(obj => obj.item ===\"ketchup\");\r",
									"\r",
									"\r",
									"pm.test(\"Correct status code\",\r",
									"    function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct recipe response - excluding array of object\", function () {\r",
									"    var response =  pm.response.json();\r",
									"    pm.expect(response.recipeCreated.name).to.eql(\"Recipe1\");\r",
									"    pm.expect(response.recipeCreated.category).to.eql(\"Lunch\");\r",
									"    pm.expect(response.recipeCreated.tag).to.include(\"fast\"); \r",
									"    pm.expect(response.recipeCreated.tag).to.include(\"fast\"); \r",
									"    pm.expect(response.recipeCreated.instruction).to.eql(\"Cooking instruction\"); \r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Correct  second items array object response\", function () {\r",
									"    console.log(ketchupObject);\r",
									"// testing the array of object response\r",
									"    pm.expect(ketchupObject.itemId).to.eql(1);\r",
									"    pm.expect(ketchupObject.item).to.eql(\"ketchup\");\r",
									"    pm.expect(ketchupObject.amount).to.eql(10);\r",
									"    pm.expect(ketchupObject.unit).to.eql(\"ml\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Correct  second items array object response\", function () {\r",
									"    console.log(potatoObject);\r",
									"// testing the array of object response\r",
									"    pm.expect(potatoObject.itemId).to.eql(2);\r",
									"    pm.expect(potatoObject.item).to.eql(\"potato\");\r",
									"    pm.expect(potatoObject.amount).to.eql(100);\r",
									"    pm.expect(potatoObject.unit).to.eql(\"grams\");\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"name\":\"Recipe1\",\r\n    \"category\": \"Lunch\",\r\n    \"picture\":\"\",\r\n    \"tag\":[\"bad\",\"fast\"],\r\n    \"instruction\":\"Cooking instruction\",\r\n    \"items\": [\r\n        {  \r\n        \"itemId\": 1,    \r\n        \"item\":\"ketchup\",\r\n        \"amount\":\"10\",\r\n        \"unit\":\"ml\"\r\n         },{\r\n        \"itemId\": 2,\r\n        \"item\":\"potato\",\r\n        \"amount\":\"100\",\r\n        \"unit\":\"grams\"\r\n        }\r\n    ]\r\n    \r\n}"
						},
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create recipe 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response =  pm.response.json();\r",
									"var recipeId = response.recipeCreated._id;\r",
									"pm.environment.set(\"recipeId2\", recipeId);\r",
									"\r",
									"const obj1 = response.recipeCreated.items.find(obj => obj.item ===\"chili sauce\");\r",
									"\r",
									"const obj2 = response.recipeCreated.items.find(obj => obj.item ===\"sallad\");\r",
									"\r",
									"pm.test(\"Correct status code\",\r",
									"    function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct recipe response - excluding array of object\", function () {\r",
									"    var response =  pm.response.json();\r",
									"    pm.expect(response.recipeCreated.name).to.eql(\"Recipe2\");\r",
									"    pm.expect(response.recipeCreated.category).to.eql(\"Lunch\");\r",
									"    pm.expect(response.recipeCreated.tag[0]).to.eql(\"bad2\"); // both work for identify String in array\r",
									"    pm.expect(response.recipeCreated.tag).to.include(\"fast\"); // both work for identify String in array\r",
									"    pm.expect(response.recipeCreated.instruction).to.eql(\"Cooking instruction2\"); \r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Correct first items array object response\", function () {\r",
									"    console.log(obj1);\r",
									"// testing the array of object response\r",
									"    pm.expect(obj1.itemId).to.eql(1);\r",
									"    pm.expect(obj1.item).to.eql(\"chili sauce\");\r",
									"    pm.expect(obj1.amount).to.eql(5);\r",
									"    pm.expect(obj1.unit).to.eql(\"ml\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Correct  second items array object response\", function () {\r",
									"    console.log(obj2);\r",
									"// testing the array of object response\r",
									"    pm.expect(obj2.itemId).to.eql(2);\r",
									"    pm.expect(obj2.item).to.eql(\"sallad\");\r",
									"    pm.expect(obj2.amount).to.eql(200);\r",
									"    pm.expect(obj2.unit).to.eql(\"grams\");\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"name\":\"Recipe2\",\r\n    \"category\": \"Lunch\",\r\n    \"picture\":\"\",\r\n    \"tag\":[\"bad2\",\"fast\"],\r\n    \"instruction\":\"Cooking instruction2\",\r\n    \"items\": [\r\n        {\r\n        \"itemId\": 1,    \r\n        \"item\":\"chili sauce\",\r\n        \"amount\":\"5\",\r\n        \"unit\":\"ml\"\r\n         },{\r\n        \"itemId\": 2,\r\n        \"item\":\"sallad\",\r\n        \"amount\":\"200\",\r\n        \"unit\":\"grams\"\r\n        }\r\n    ]\r\n    \r\n}"
						},
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all recipes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get recipe 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response =  pm.response.json();\r",
									"const potatoObject = response.recipe[0].items.find(obj => obj.item ===\"potato\");\r",
									"console.log(potatoObject);\r",
									"const ketchupObject = response.recipe[0].items.find(obj => obj.item ===\"ketchup\");\r",
									"\r",
									"\r",
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct recipe response - excluding array of object\", function () {\r",
									"    var response =  pm.response.json();\r",
									"    pm.expect(response.recipe[0].name).to.eql(\"Recipe1\");\r",
									"    pm.expect(response.recipe[0].category).to.eql(\"Lunch\");\r",
									"    pm.expect(response.recipe[0].tag[0]).to.eql(\"bad\"); // both work for identify String in array\r",
									"    pm.expect(response.recipe[0].tag).to.include(\"fast\"); // both work for identify String in array\r",
									"    pm.expect(response.recipe[0].instruction).to.eql(\"Cooking instruction\"); \r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Correct  second items array object response\", function () {\r",
									"// testing the array of object response\r",
									"    pm.expect(ketchupObject.item).to.eql(\"ketchup\");\r",
									"    pm.expect(ketchupObject.amount).to.eql(10);\r",
									"    pm.expect(ketchupObject.unit).to.eql(\"ml\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Correct  second items array object response\", function () {\r",
									"\r",
									"    pm.expect(potatoObject.item).to.eql(\"potato\");\r",
									"    pm.expect(potatoObject.amount).to.eql(100);\r",
									"    pm.expect(potatoObject.unit).to.eql(\"grams\");\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "{{recipeId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Change name recipe 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response =  pm.response.json();\r",
									"const ketchupObject = response.updatedRecipe.items.find(obj => obj.item ===\"ketchup\");\r",
									"\r",
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct update response - excluding array of object\", function () {\r",
									"    var response =  pm.response.json();\r",
									"    pm.expect(response.updatedRecipe.name).to.eql(\"Recipe1Updated\");  \r",
									"    pm.expect(ketchupObject.amount).to.eql(5);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"name\":\"Recipe1Updated\",\r\n    \"category\": \"Lunch\",\r\n    \"picture\":\"\",\r\n    \"tag\":[\"bad\",\"fast\"],\r\n    \"instruction\":\"Cooking instruction\",\r\n    \"items\": [\r\n        {  \r\n        \"itemId\": 1,    \r\n        \"item\":\"ketchup\",\r\n        \"amount\":\"5\",\r\n        \"unit\":\"ml\"\r\n         },{\r\n        \"itemId\": 2,\r\n        \"item\":\"potato\",\r\n        \"amount\":\"100\",\r\n        \"unit\":\"grams\"\r\n        }\r\n    ]\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "{{recipeId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect-User not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"User not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "6328bab1c3ca1162dcb1342e"
								},
								{
									"key": "recipeId",
									"value": "{{recipeId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete recipe 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql('The recipe has been deleted');\r",
									"    pm.expect(jsonData.deletedRecipe).to.eql('Recipe1Updated');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "{{recipeId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all recipes Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete recipe 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql('The recipe has been deleted');\r",
									"    pm.expect(jsonData.deletedRecipe).to.eql('Recipe2');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "{{recipeId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect Get all error message",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"Recipe not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect - recipe not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Correct status code\", function(){\r",
									"  pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql('Recipe not found');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "{{recipeId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect Get spec error message Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"Recipe not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "6328bb84c3ca1162dcb1343d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect - Recipe not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"  pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"Recipe not found\");\r",
									" \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "63233097a06d3469e415e0ef"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete profile 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct user message\"), function(){\r",
									"      var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"The profile has been deleted\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Shoppinglist Controller Test",
			"item": [
				{
					"name": "Create profile 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =  pm.response.json();\r",
									"var profileId = jsonData.userCreated._id;\r",
									"pm.environment.set(\"profileID_1\", profileId)\r",
									"\r",
									"\r",
									"pm.test(\"Correct status code\",\r",
									"    function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct user response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.userCreated._id).to.eql(\"HarryPotter\");\r",
									"    pm.expect(jsonData.userCreated.password).to.eql(\"Hogwarts123\");\r",
									"    pm.expect(jsonData.userCreated.question).to.eql(\"Which house?\");\r",
									"    pm.expect(jsonData.userCreated.answer).to.eql(\"Gryffindor\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"HarryPotter\",\r\n    \"password\":\"Hogwarts123\",\r\n    \"question\":\"Which house?\",\r\n    \"answer\": \"Gryffindor\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/profiles",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles"
							]
						}
					},
					"response": []
				},
				{
					"name": "shoppingList 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response =  pm.response.json();\r",
									"var shopList = response.shoppinglistCreated._id;\r",
									"pm.environment.set(\"shopList_1\", shopList)\r",
									"\r",
									"pm.test(\"Correct status code\",\r",
									"    function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct shoppinglist response\", function () {\r",
									"    var response = pm.response.json(); // parse to json\r",
									"\r",
									"    pm.expect(response.shoppinglistCreated.week).to.eql(20);\r",
									"    pm.expect(response.shoppinglistCreated.year).to.eql(2022);\r",
									"    pm.expect(response.shoppinglistCreated.amount).to.include(1);\r",
									"    pm.expect(response.shoppinglistCreated.amount).to.include(200); \r",
									"    pm.expect(response.shoppinglistCreated.amount).to.include(300);\r",
									"    pm.expect(response.shoppinglistCreated.items).to.include(\"ketchup\");\r",
									"    pm.expect(response.shoppinglistCreated.items).to.include(\"potato\");\r",
									"    pm.expect(response.shoppinglistCreated.items).to.include(\"milk\");\r",
									"    pm.expect(response.shoppinglistCreated.unit).to.include(\"ml\");\r",
									"    pm.expect(response.shoppinglistCreated.unit).to.include(\"grams\");\r",
									"    pm.expect(response.shoppinglistCreated.unit).to.include(\"l\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"week\": 20,\r\n    \"year\":2022,\r\n    \"items\":[\"ketchup\",\"potato\",\"milk\"],\r\n    \"amount\":[1,200,300],\r\n    \"unit\":[\"ml\",\"grams\",\"l\"]\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/shoppinglists",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"shoppinglists"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "shoppingList 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response =  pm.response.json();\r",
									"var shopList = response.shoppinglistCreated._id;\r",
									"pm.environment.set(\"shopList_2\", shopList)\r",
									"\r",
									"pm.test(\"Correct status code\",\r",
									"    function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Correct shoppinglists response\", function () {\r",
									"    var response = pm.response.json(); // parse to json\r",
									"\r",
									"    pm.expect(response.shoppinglistCreated.week).to.eql(50);\r",
									"    pm.expect(response.shoppinglistCreated.year).to.eql(2022);\r",
									"    pm.expect(response.shoppinglistCreated.amount).to.include(1);\r",
									"    pm.expect(response.shoppinglistCreated.amount).to.include(200); \r",
									"    pm.expect(response.shoppinglistCreated.items).to.include(\"ketchup\");\r",
									"    pm.expect(response.shoppinglistCreated.items).to.include(\"potato\");\r",
									"    pm.expect(response.shoppinglistCreated.unit).to.include(\"ml\");\r",
									"    pm.expect(response.shoppinglistCreated.unit).to.include(\"grams\");\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"week\": 50,\r\n    \"year\":2022,\r\n    \"items\":[\"ketchup\",\"potato\"],\r\n    \"amount\":[1,200],\r\n    \"unit\":[\"ml\",\"grams\"]\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/shoppinglists/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"shoppinglists",
								""
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all shoppinglist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/shoppinglists/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"shoppinglists",
								""
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get shoppinglist 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response =  pm.response.json();\r",
									"\r",
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct shoppinglist response\", function () {\r",
									"    var response = pm.response.json(); // parse to json\r",
									"\r",
									"    pm.expect(response.shoppinglist[0].week).to.eql(20);\r",
									"    pm.expect(response.shoppinglist[0].year).to.eql(2022);\r",
									"    pm.expect(response.shoppinglist[0].amount).to.include(1);\r",
									"    pm.expect(response.shoppinglist[0].amount).to.include(200); \r",
									"    pm.expect(response.shoppinglist[0].amount).to.include(300);\r",
									"    pm.expect(response.shoppinglist[0].items).to.include(\"ketchup\");\r",
									"    pm.expect(response.shoppinglist[0].items).to.include(\"potato\");\r",
									"    pm.expect(response.shoppinglist[0].items).to.include(\"milk\");\r",
									"    pm.expect(response.shoppinglist[0].unit).to.include(\"ml\");\r",
									"    pm.expect(response.shoppinglist[0].unit).to.include(\"grams\");\r",
									"    pm.expect(response.shoppinglist[0].unit).to.include(\"l\");\r",
									"\r",
									"});\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/shoppinglists/:shoplistId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"shoppinglists",
								":shoplistId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "shoplistId",
									"value": "{{shopList_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect-User not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"User not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/shoppinglists/:shoplistId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"shoppinglists",
								":shoplistId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "6328bab1c3ca1162dcb1342e"
								},
								{
									"key": "shoplistId",
									"value": "{{shopList_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete shoppinglist 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Correct status code\", function(){\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql('The shoppinglist for week 20 has been deleted');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/shoppinglists/:shoplistId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"shoppinglists",
								":shoplistId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "shoplistId",
									"value": "{{shopList_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete shoppinglist 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql('The shoppinglist for week 50 has been deleted');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/shoppinglists/:shoplistId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"shoppinglists",
								":shoplistId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "shoplistId",
									"value": "{{shopList_2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect Get spec error message",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"Shoppinglist not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/shoppinglists/:shoplistId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"shoppinglists",
								":shoplistId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "shoplistId",
									"value": "632b5baf9f411542cc95e666"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect Get all error message",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"Shoppinglist not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/shoppinglists",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"shoppinglists"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect - shoppinglist not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"  pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"Shoppinglist not found\");\r",
									" \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/shoppinglists/:shoplistId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"shoppinglists",
								":shoplistId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "shoplistId",
									"value": "632b5baf9f411542cc95e666"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete profile 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct user message\"), function(){\r",
									"      var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"The profile has been deleted\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Days Controller Test",
			"item": [
				{
					"name": "Create profile 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =  pm.response.json();\r",
									"var profileId = jsonData.userCreated._id;\r",
									"pm.environment.set(\"profileID_1\", profileId)\r",
									"\r",
									"\r",
									"pm.test(\"Correct status code\",\r",
									"    function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct user response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.userCreated._id).to.eql(\"HarryPotter\");\r",
									"    pm.expect(jsonData.userCreated.password).to.eql(\"Hogwarts123\");\r",
									"    pm.expect(jsonData.userCreated.question).to.eql(\"Which house?\");\r",
									"    pm.expect(jsonData.userCreated.answer).to.eql(\"Gryffindor\"); \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"HarryPotter\",\r\n    \"password\":\"Hogwarts123\",\r\n    \"question\":\"Which house?\",\r\n    \"answer\": \"Gryffindor\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/profiles",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create recipe 1 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response =  pm.response.json();\r",
									"var recipeId = response.recipeCreated._id;\r",
									"pm.environment.set(\"recipeId1\", recipeId);\r",
									"\r",
									"const potatoObject = response.recipeCreated.items.find(obj => obj.item ===\"potato\");\r",
									"\r",
									"const ketchupObject = response.recipeCreated.items.find(obj => obj.item ===\"ketchup\");\r",
									"\r",
									"\r",
									"pm.test(\"Correct status code\",\r",
									"    function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct recipe response - excluding array of object\", function () {\r",
									"    var response =  pm.response.json();\r",
									"    pm.expect(response.recipeCreated.name).to.eql(\"Recipe1\");\r",
									"    pm.expect(response.recipeCreated.category).to.eql(\"Lunch\");\r",
									"    pm.expect(response.recipeCreated.tag).to.include(\"fast\"); \r",
									"    pm.expect(response.recipeCreated.tag).to.include(\"fast\"); \r",
									"    pm.expect(response.recipeCreated.instruction).to.eql(\"Cooking instruction\"); \r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Correct  second items array object response\", function () {\r",
									"    console.log(ketchupObject);\r",
									"// testing the array of object response\r",
									"    pm.expect(ketchupObject.itemId).to.eql(1);\r",
									"    pm.expect(ketchupObject.item).to.eql(\"ketchup\");\r",
									"    pm.expect(ketchupObject.amount).to.eql(10);\r",
									"    pm.expect(ketchupObject.unit).to.eql(\"ml\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Correct  second items array object response\", function () {\r",
									"    console.log(potatoObject);\r",
									"// testing the array of object response\r",
									"    pm.expect(potatoObject.itemId).to.eql(2);\r",
									"    pm.expect(potatoObject.item).to.eql(\"potato\");\r",
									"    pm.expect(potatoObject.amount).to.eql(100);\r",
									"    pm.expect(potatoObject.unit).to.eql(\"grams\");\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"name\":\"Recipe1\",\r\n    \"category\": \"Lunch\",\r\n    \"picture\":\"\",\r\n    \"tag\":[\"bad\",\"fast\"],\r\n    \"instruction\":\"Cooking instruction\",\r\n    \"items\": [\r\n        {  \r\n        \"itemId\": 1,    \r\n        \"item\":\"ketchup\",\r\n        \"amount\":\"10\",\r\n        \"unit\":\"ml\"\r\n         },{\r\n        \"itemId\": 2,\r\n        \"item\":\"potato\",\r\n        \"amount\":\"100\",\r\n        \"unit\":\"grams\"\r\n        }\r\n    ]\r\n    \r\n}"
						},
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Day 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =  pm.response.json();",
									"var dayId = jsonData.dayCreated._id;",
									"pm.environment.set(\"dayID_1\", dayId);",
									"",
									"pm.test(\"Correct status code\",",
									"    function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Correct day response\", function () {",
									"    var jsonData = pm.response.json(); // parse to json",
									"    pm.expect(jsonData.dayCreated.name).to.eql(\"Monday\");",
									"    pm.expect(jsonData.dayCreated.week).to.eql(1);",
									"    pm.expect(jsonData.dayCreated.year).to.eql(2022);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Acccept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Monday\",\n    \"week\": 1,\n    \"year\": 2022,\n    \"recipes\":\"{{recipeId1}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/days",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"days"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Day 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =  pm.response.json();",
									"var dayId = jsonData.dayCreated._id;",
									"pm.environment.set(\"dayID_2\", dayId);",
									"",
									"pm.test(\"Correct status code\",",
									"    function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Correct day response\", function () {",
									"    var jsonData = pm.response.json(); // parse to json",
									"    pm.expect(jsonData.dayCreated.name).to.eql(\"Tuesday\");",
									"    pm.expect(jsonData.dayCreated.week).to.eql(1);",
									"    pm.expect(jsonData.dayCreated.year).to.eql(2022);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Tuesday\",\n    \"week\": 1,\n    \"year\": 2022\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/days",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"days"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all days",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/days",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"days"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get day 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Correct day response\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.day[0].name).to.eql(\"Monday\");",
									"    pm.expect(jsonData.day[0].week).to.eql(1);",
									"    pm.expect(jsonData.day[0].year).to.eql(2022);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/days/:dayId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"days",
								":dayId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "dayId",
									"value": "{{dayID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect-User not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"User not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/shoppinglists/:shoplistId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"shoppinglists",
								":shoplistId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "6328bab1c3ca1162dcb1342e"
								},
								{
									"key": "shoplistId",
									"value": "{{shopList_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete day 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Correct delete message\"), function(){",
									"      var jsonData = pm.response.json(); // parse to json",
									"    pm.expect(jsonData.message).to.eql(\"The day has been deleted\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/days/:dayId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"days",
								":dayId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "dayId",
									"value": "{{dayID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete day 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Correct delete message\"), function(){",
									"      var jsonData = pm.response.json(); // parse to json",
									"    pm.expect(jsonData.message).to.eql(\"The day has been deleted\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/days/:dayId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"days",
								":dayId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "dayId",
									"value": "{{dayID_2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get recipe 1 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response =  pm.response.json();\r",
									"const potatoObject = response.recipe[0].items.find(obj => obj.item ===\"potato\");\r",
									"console.log(potatoObject);\r",
									"const ketchupObject = response.recipe[0].items.find(obj => obj.item ===\"ketchup\");\r",
									"\r",
									"\r",
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct recipe response - excluding array of object\", function () {\r",
									"    var response =  pm.response.json();\r",
									"    pm.expect(response.recipe[0].name).to.eql(\"Recipe1\");\r",
									"    pm.expect(response.recipe[0].category).to.eql(\"Lunch\");\r",
									"    pm.expect(response.recipe[0].tag[0]).to.eql(\"bad\"); // both work for identify String in array\r",
									"    pm.expect(response.recipe[0].tag).to.include(\"fast\"); // both work for identify String in array\r",
									"    pm.expect(response.recipe[0].instruction).to.eql(\"Cooking instruction\"); \r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Correct  second items array object response\", function () {\r",
									"// testing the array of object response\r",
									"    pm.expect(ketchupObject.item).to.eql(\"ketchup\");\r",
									"    pm.expect(ketchupObject.amount).to.eql(10);\r",
									"    pm.expect(ketchupObject.unit).to.eql(\"ml\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Correct  second items array object response\", function () {\r",
									"\r",
									"    pm.expect(potatoObject.item).to.eql(\"potato\");\r",
									"    pm.expect(potatoObject.amount).to.eql(100);\r",
									"    pm.expect(potatoObject.unit).to.eql(\"grams\");\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "{{recipeId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete recipe 1 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql('The recipe has been deleted');\r",
									"    pm.expect(jsonData.deletedRecipe).to.eql('Recipe1');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "{{recipeId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect Get spec error message Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"Shoppinglist not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/shoppinglists/:shoplistId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"shoppinglists",
								":shoplistId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "shoplistId",
									"value": "632b5baf9f411542cc95e666"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect Get all error message Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"Shoppinglist not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/shoppinglists",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"shoppinglists"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect - day not found Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"  pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"Shoppinglist not found\");\r",
									" \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/shoppinglists/:shoplistId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"shoppinglists",
								":shoplistId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "shoplistId",
									"value": "632b5baf9f411542cc95e666"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete profile 1 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct user message\"), function(){\r",
									"      var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"The profile has been deleted\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}